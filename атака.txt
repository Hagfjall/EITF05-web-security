SQL INJECTION:
    requires: multi_query or something that allows multiple queries
    use case: user tries to log in
    end statement with:
        -- or # 
        depending on sql db (in our case #)

    атака план:

        legit    the injected query
        v        v--------------------------------------v
        harald'; CREATE TABLE lol (username VARCHAR(30));#
              ^^                                         ^ ignore rest of query
              escape

XSS:
    stored xss:
        xss script is stored on target (vulnerable) server 

        атака план:
                
            - write javascript attack
            - store in on targeted (vulnerable) server
            - all users who request that resource will execute it

        examples:

            - facebook status update (<script>all who see me are forfeit</script>)
            - ebay product descriptions (this is actually true, I think)
            - youtube video annotations (hey, would be fun, right?)

       	protection:

       		- always treat user data as hostile/malicious
       		- always sanitize user data
       		- only use innerHTML with user data if pro
       		- never use eval

    reflected:
        trick user into giving you the session

        атака план:

        	- encode javascript attack in a link
        	- give link to user
        	- user clicks link
        	- server returns vulnerable html
        	- javascript attack executes in user's browser :(

        examples:

        	- search engine (google.com?q=<script>give me your account</script>)
        	- reddit thread (reddit.com/r/<script src='/xss.js'></script>)

        proection:

        	- never echo user data directly
        	- always sanitize user data
        	- same as reflected
CSRF:
    trick the user into doing something stupid

    атака план:
    	
    	- find some vulnerable website (e.g localhost/websec)
    	- distribute auto-executing snippets of code to users
    	- exposed users will make requests to the targeted website

    	examples:

    		- bank transfer (bank.cc/transfer.php?amount=100&to=myaccounthaha)
    		- tumblr worm (my.tumblr.com/post/new?title=lol&content=pwnd_by_hackistan)
        	- spotify (spotify.com/account/delete)

        protection:

        	- check referrer/origin headers
        	- use randomized tokens on all (dangerous) user actions
        	- don't be vulnerable to XSS
        	(- don't use sessions at all :D)
